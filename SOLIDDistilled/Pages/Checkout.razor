@page "/checkout"
@using SolidDistilled.Models
@using SolidDistilled.Enums
@using SolidDistilled.Services

<div class="container py-5">
    <h1 class="display-6 text-center mb-4">Book Checkout</h1>
    <div class="row">
        <!-- Offer Selector -->
        <div class="col-md-4">
            <div class="bg-body-tertiary text-light p-4 rounded border border-secondary-subtle">
                <h4 class="mb-3">Select Offer Type</h4>

                <div class="btn-group d-flex flex-wrap" role="group">
                    @foreach (var offer in Enum.GetValues<OfferType>())
                    {
                        var offerLabel = offer switch
                        {
                            OfferType.Fixed => "Fixed",
                            OfferType.Percentage => "Percentage",
                            OfferType.Bogo => "BOGO",
                            OfferType.Promo => "Promo",
                            OfferType.FirstTime => "First-Time",
                            OfferType.Author => "Author",
                            _ => offer.ToString()
                        };

                        <input type="radio"
                               class="btn-check w-50"
                               name="offer"
                               id="offer-@offer"
                               value="@offer.ToString()"
                               checked="@(SelectedOffer == offer)"
                               @onchange="() => SetOffer(offer)" />

                        <label class="btn btn-outline-light btn-sm m-1 w-50"
                               for="offer-@offer"
                               title="@offerLabel">
                            @offerLabel
                        </label>
                    }
                </div>

                @if (SelectedOffer == OfferType.Fixed)
                {
                    <div class="mt-3">
                        @foreach (var amount in new[] { 5, 10, 15, 20 })
                        {
                            <button class="btn btn-outline-light btn-sm me-2"
                                    @onclick="() => SelectedFixedAmount = amount">
                                $@amount
                            </button>
                        }
                    </div>
                }
                @if (SelectedOffer == OfferType.Percentage)
                {
                    <div class="mt-3">
                        @foreach (var p in new[] { 1, 5, 10, 20, 50 })
                        {
                            <button class="btn btn-outline-light btn-sm me-2"
                                    @onclick="() => SelectedPercentage = p">
                                @p%
                            </button>
                        }
                    </div>
                }
                @if (SelectedOffer == OfferType.Bogo)
                {
                    <select class="form-select mt-3"
                            @onchange="e => SelectedBogoBook = _service.GetBooks().FirstOrDefault(b => b.Id == int.Parse(e.Value.ToString()))">
                        <option disabled selected>Select Book</option>
                        @foreach (var book in _service.GetCartItems().Select(x => x.Book))
                        {
                            <option value="@book.Id">@book.Title</option>
                        }
                    </select>
                }
                @if (SelectedOffer == OfferType.Promo)
                {
                    <div class="mt-3 d-flex">
                        <input class="form-control me-2" placeholder="Enter promo code" @bind="PromoCode" />
                        <button class="btn btn-outline-secondary">Apply</button>
                    </div>
                }
                @if (SelectedOffer == OfferType.Author)
                {
                    <select class="form-select mt-3"
                            @onchange="e => SelectedAuthor = e.Value.ToString()">
                        <option disabled selected>Select Author</option>
                        @foreach (var author in _service.GetCartItems().Select(x => x.Book.Author).Distinct())
                        {
                            <option value="@author">@author</option>
                        }
                    </select>
                }
            </div>
        </div>

        <!-- Checkout Summary -->
        <div class="col-md-8">
            <div class="card bg-body-tertiary text-light border border-secondary-subtle">
                <div class="card-header">
                    <h5 class="card-title mb-0">Order Summary</h5>
                    <small class="text-muted">Review your order details</small>
                </div>
                <div class="card-body">
                    @if (!_service.GetCartItems().Any())
                    {
                        <div class="text-muted text-center">Your cart is empty.</div>
                    }
                    else
                    {
                        @foreach (var cartItem in _service.GetCartItems())
                        {
                            <div class="card bg-body-secondary text-light border border-secondary-subtle mb-3">
                                <div class="card-body d-flex gap-3 align-items-center">
                                    <img src="/thumbnails/@cartItem.Book.Thumbnail"
                                         class="img-thumbnail"
                                         style="width: 70px; height: 100px; object-fit: cover"
                                         alt="@cartItem.Book.Title" />
                                    <div class="flex-grow-1">
                                        <h6 class="mb-1">@cartItem.Book.Title</h6>
                                        <small class="text-muted">@cartItem.Book.Author</small>
                                        <div class="fw-semibold mt-1">$@cartItem.Book.Price</div>
                                        <div class="d-flex align-items-center gap-2 mt-2">
                                            <button class="btn btn-outline-secondary btn-sm"
                                                    @onclick="() => { _service.DecreaseQuantity(cartItem); _appState.NotifyStateChanged(); }">-</button>
                                            <span>@cartItem.Quantity</span>
                                            <button class="btn btn-outline-secondary btn-sm"
                                                    @onclick="() => { _service.IncreaseQuantity(cartItem); _appState.NotifyStateChanged(); }">+</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }

                    @{
                        var (discount, label, subtotal, total) = GetSummary();
                    }

                    <hr />
                    <div class="d-flex justify-content-between">
                        <span>Subtotal</span>
                        <span>$@subtotal</span>
                    </div>
                    @if (discount > 0)
                    {
                        <div class="d-flex justify-content-between text-success fw-semibold">
                            <span>@label</span>
                            <span>-$@discount</span>
                        </div>
                    }
                    <hr />
                    <div class="d-flex justify-content-between fs-5 fw-bold">
                        <span>Total</span>
                        <span>$@total</span>
                    </div>
                </div>
                <div class="card-footer">
                    <button class="btn btn-primary w-100">
                        <i class="bi bi-credit-card me-2"></i>
                        Proceed to Payment
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] private BookShopService _service { get; set; } = default!;
    [Inject] private AppState _appState { get; set; } = default!;

    private OfferType SelectedOffer = OfferType.Fixed;

    private decimal? SelectedFixedAmount = null;
    private decimal? SelectedPercentage = null;
    private Book? SelectedBogoBook = null;
    private string? PromoCode = null;
    private string? SelectedAuthor = null;

    private void SetOffer(OfferType offer)
    {
        SelectedOffer = offer;
        SelectedFixedAmount = null;
        SelectedPercentage = null;
        SelectedBogoBook = null;
        PromoCode = null;
        SelectedAuthor = null;
    }

    private (decimal Discount, string Label, decimal Subtotal, decimal Total) GetSummary()
    {
        var (discount, label) = _service.GetDiscountDetails(
            SelectedOffer,
            SelectedBogoBook,
            PromoCode,
            SelectedFixedAmount,
            SelectedPercentage,
            SelectedAuthor);

        var subtotal = _service.GetCartItems().Sum(x => x.Book.Price * x.Quantity);
        var total = subtotal - discount;

        return (discount, label, subtotal, total);
    }
}
